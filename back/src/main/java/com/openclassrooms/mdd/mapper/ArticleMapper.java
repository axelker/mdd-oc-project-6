package com.openclassrooms.mdd.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import com.openclassrooms.mdd.dto.request.ArticleRequest;
import com.openclassrooms.mdd.dto.response.ArticleResponse;
import com.openclassrooms.mdd.model.ArticleEntity;

/**
 * Mapper for converting between {@link ArticleEntity}, {@link ArticleRequest},
 * and {@link ArticleResponse}.
 * <p>
 * This interface uses MapStruct to automatically map fields between the DTOs
 * and the entity.
 * It facilitates conversions between database entities and API request/response
 * objects.
 * </p>
 */
@Mapper(componentModel = "spring")
public interface ArticleMapper {

    /**
     * Singleton instance of the mapper.
     */
    ArticleMapper INSTANCE = Mappers.getMapper(ArticleMapper.class);

    /**
     * Converts an {@link ArticleRequest} DTO to an {@link ArticleEntity}.
     * <p>
     * The following fields are ignored:
     * <ul>
     * <li>{@code id} - It is automatically generated by the database.</li>
     * <li>{@code createdAt} - It is managed by the system.</li>
     * <li>{@code updatedAt} - It is managed by the system.</li>
     * </ul>
     * </p>
     *
     * @param dto     the article request DTO containing input data.
     * @param ownerId the ID of the user who owns the article.
     * @return an {@link ArticleEntity} populated with the provided data.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "owner.id", source = "ownerId")
    @Mapping(target = "theme.id", source = "dto.themeId")
    ArticleEntity toEntity(ArticleRequest dto, Long ownerId);

    /**
     * Converts an {@link ArticleEntity} to an {@link ArticleResponse} DTO.
     * <p>
     * The following mappings are applied:
     * <ul>
     * <li>{@code owner.id} ← {@code owner.id}</li>
     * <li>{@code theme.id} ← {@code theme.id}</li>
     * <li>{@code owner.name} ← {@code owner.username}</li>
     * <li>{@code theme.name} ← {@code theme.name}</li>
     * </ul>
     * </p>
     *
     * @param entity the article entity to convert.
     * @return an {@link ArticleResponse} DTO populated with the article data.
     */
    @Mapping(target = "owner.id", source = "owner.id")
    @Mapping(target = "theme.id", source = "theme.id")
    @Mapping(target = "owner.name", source = "owner.username")
    @Mapping(target = "theme.name", source = "theme.name")
    ArticleResponse toDto(ArticleEntity entity);
}
