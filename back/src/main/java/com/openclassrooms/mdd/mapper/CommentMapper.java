package com.openclassrooms.mdd.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

import com.openclassrooms.mdd.dto.request.CommentRequest;
import com.openclassrooms.mdd.dto.response.CommentResponse;
import com.openclassrooms.mdd.model.CommentEntity;

/**
 * Mapper for converting between {@link CommentEntity}, {@link CommentRequest},
 * and {@link CommentResponse}.
 * <p>
 * This interface uses MapStruct to automatically map fields between the DTOs
 * and the entity.
 * It facilitates conversions between database entities and API request/response
 * objects.
 * </p>
 */
@Mapper(componentModel = "spring")
public interface CommentMapper {

    /**
     * Singleton instance of the mapper.
     */
    CommentMapper INSTANCE = Mappers.getMapper(CommentMapper.class);

    /**
     * Converts a {@link CommentRequest} DTO to a {@link CommentEntity}.
     * <p>
     * The following fields are ignored:
     * <ul>
     * <li>{@code id} - Automatically generated by the database.</li>
     * <li>{@code createdAt} - Managed by the system.</li>
     * <li>{@code updatedAt} - Managed by the system.</li>
     * <li>{@code user} - Must be set separately, as it requires fetching the user
     * entity.</li>
     * <li>{@code article} - Must be set separately, as it requires fetching the
     * article entity.</li>
     * </ul>
     * </p>
     *
     * @param message the comment request DTO containing the comment details.
     * @return a {@link CommentEntity} populated with the provided data.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    @Mapping(target = "user", ignore = true)
    @Mapping(target = "article", ignore = true)
    CommentEntity toEntity(CommentRequest message);

    /**
     * Converts a {@link CommentEntity} to a {@link CommentResponse} DTO.
     * <p>
     * The following mappings are applied:
     * <ul>
     * <li>{@code owner.id} ← {@code user.id}</li>
     * <li>{@code owner.name} ← {@code user.username}</li>
     * </ul>
     * </p>
     *
     * @param comment the comment entity to convert.
     * @return a {@link CommentResponse} DTO populated with the comment data.
     */
    @Mapping(target = "owner.id", source = "user.id")
    @Mapping(target = "owner.name", source = "user.username")
    CommentResponse toDto(CommentEntity comment);
}
